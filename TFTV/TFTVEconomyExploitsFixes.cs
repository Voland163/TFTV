using HarmonyLib;
using PhoenixPoint.Common.Core;
using PhoenixPoint.Common.Entities;
using PhoenixPoint.Common.Entities.GameTags;
using PhoenixPoint.Common.Entities.GameTagsTypes;
using PhoenixPoint.Common.Entities.Items;
using PhoenixPoint.Common.Levels.ActorDeployment;
using PhoenixPoint.Common.Levels.Missions;
using PhoenixPoint.Common.View.ViewControllers;
using PhoenixPoint.Geoscape.Core;
using PhoenixPoint.Geoscape.Entities;
using PhoenixPoint.Geoscape.Entities.Missions.Outcomes;
using PhoenixPoint.Geoscape.Entities.Missions;
using PhoenixPoint.Geoscape.Levels;
using PhoenixPoint.Geoscape.Levels.Factions;
using PhoenixPoint.Geoscape.View.ViewControllers.Modal;
using PhoenixPoint.Tactical.Entities;
using PhoenixPoint.Tactical.Entities.Abilities;
using PhoenixPoint.Tactical.Entities.ActorsInstance;
using PhoenixPoint.Tactical.Entities.Equipments;
using PhoenixPoint.Tactical.Levels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Security.Policy;
using static PhoenixPoint.Geoscape.Entities.GeoHaven;
using Base.Core;

namespace TFTV
{
    internal class TFTVEconomyExploitsFixes
    {

        private static readonly SharedData Shared = TFTVMain.Shared;
        private static readonly DefCache DefCache = TFTVMain.Main.DefCache;

        [HarmonyPatch(typeof(HavenDefenceOutcomeDataBind), "ModalShowHandler")]
        public static class HavenDefenceOutcomeDataBind_ModalShowHandler_Experiment_patch
        {
            public static void Postfix(HavenDefenceOutcomeDataBind __instance, UIModal modal)
            {
                try
                {
                    // GeoLevelController controller = GameUtl.CurrentLevel().GetComponent<GeoLevelController>();


                    TFTVLogger.Always($"Haven Defense mission outcome showing.");

                    GeoMission geoMission = (GeoMission)modal.Data;

                    if (geoMission.GetMissionOutcomeState() == TacFactionState.Defeated)
                    {
                        GeoHavenDefenseMission geoHavenDefenseMission = (GeoHavenDefenseMission)modal.Data;
                        int result = geoHavenDefenseMission.DefenderDeployment - geoHavenDefenseMission.AttackerDeployment;

                        if (result > 0)
                        {
                            TFTVLogger.Always($"Haven Defense mission won.");
                            geoMission.Site.ActiveMission = null;
                            geoMission.Site.RefreshVisuals();

                        }
                        else
                        {
                            TFTVLogger.Always($"Haven Defense mission lost.");
                            geoMission.Site.DestroySite();
                        }
                    }

                }
                catch (Exception e)
                {
                    TFTVLogger.Error(e);
                    throw;
                }
            }
        }

        public static void ClearTimerNoSecondChances(GeoMission geoMission)
        {
            try 
            {
                if (TFTVNewGameOptions.NoSecondChances) 
                {
                    GeoSite geoSite = geoMission.Site;

                    if (geoSite!=null && geoSite.ActiveMission == null && geoSite.ExpiringTimerAt!=null)
                    {

                        geoSite.ExpiringTimerAt = TimeUnit.Zero;

                    }
                }
            }
            catch (Exception e)
            {
                TFTVLogger.Error(e);
                throw;
            }
        }

        public static void AddReinforcementTagToImplementNoDropsOption(TacticalActorBase actor, TacticalLevelController __instance)
        {
            try
            {
                TFTVConfig config = TFTVMain.Main.Config;

                if (config.ReinforcementsNoDrops && __instance.TurnNumber > 1 && !__instance.IsLoadingSavedGame && actor is TacticalActor tacticalActor)
                {
                    if (tacticalActor.TacticalFaction != __instance.GetFactionByCommandName("PX"))
                    {
                        GameTagDef reinforcementTag = DefCache.GetDef<GameTagDef>("ReinforcementTag_GameTagDef");

                        //  TFTVLogger.Always($"reinforcementTag is {reinforcementTag?.name}");

                        // TFTVLogger.Always("The turn number is " + __instance.TurnNumber);

                        if (!tacticalActor.HasGameTag(reinforcementTag))
                        {
                            tacticalActor?.GameTags?.Add(reinforcementTag);
                            TFTVLogger.Always($"Reinforcement tag added to {actor?.name} {actor.HasGameTag(reinforcementTag)}");

                        }
                    }
                }

            }
            catch (Exception e)
            {
                TFTVLogger.Error(e);
            }
        }


        [HarmonyPatch(typeof(DieAbility), "ShouldDestroyItem")]
        public static class DieAbility_ShouldDestroyItem_patch
        {

            public static void Postfix(DieAbility __instance, TacticalItem item, ref bool __result)
            {
                try
                {
                    TFTVConfig config = TFTVMain.Main.Config;
                    GameTagDef reinforcementTag = DefCache.GetDef<GameTagDef>("ReinforcementTag_GameTagDef");

                    if (config.ReinforcementsNoDrops && (__instance.TacticalActorBase.HasGameTag(reinforcementTag) 
                        || __instance.TacticalActor.DeathInfo.IsAlreadyResurrected))
                    {
                        TFTVLogger.Always($"{__instance?.TacticalActorBase?.name} has reinforcement tag, so should drop no items on death");
                        __result = true;
                    }
                }
                catch (Exception e)
                {
                    TFTVLogger.Error(e);
                    throw;
                }
            }
        }



        [HarmonyPatch(typeof(GeoHaven), "IncreaseAlertness")]
        public static class GeoHaven_IncreaseAlertness_patch
        {
            public static bool Prefix(GeoHaven __instance)
            {
                try
                {
                    TFTVConfig config = TFTVMain.Main.Config;

                 //   TFTVLogger.Always($"Running GeoHaven.IncreaseAlertness");

                    if (config.LimitedRaiding)
                    {
                        // Get the type of the GeoHaven class
                        Type geoHavenType = typeof(GeoHaven);

                        // Get the PropertyInfo object representing the AlertLevel property
                        PropertyInfo alertLevelProperty = geoHavenType.GetProperty("AlertLevel", BindingFlags.Public | BindingFlags.Instance);

                        // Set the value of the AlertLevel property using reflection
                        if (alertLevelProperty != null && alertLevelProperty.CanWrite)
                        {
                            alertLevelProperty.SetValue(__instance, HavenAlertLevel.HighAlert);
                        }

                        __instance.AlertCooldownDaysLeft = 7;

                      //  TFTVLogger.Always($"AlertCoolDownDaysLeft is {__instance.AlertCooldownDaysLeft}");

                        return false;
                    }

                    return true;
                }
                catch (Exception e)
                {
                    TFTVLogger.Error(e);
                    throw;
                }
            }
        }


        /// <summary>
        /// This makes entering lair - opening crate - evacuate - repeat unprofitable. 
        /// Limitations; once the game is loaded, the Dictionary will be cleared. 
        /// </summary>

        public static Dictionary<int, int> AttackedLairSites;

        [HarmonyPatch(typeof(GeoMission), "AddCratesToMissionData")]
        public static class GeoMission_AddEquipmentCrates_patch
        {

            public static bool Prefix(GeoMission __instance, TacMissionData missionData)
            {
                try
                {

                    MissionTagDef lairTag = DefCache.GetDef<MissionTagDef>("MissionTypeAlienLairAssault_MissionTagDef");
                    MissionTagDef citadelTag = DefCache.GetDef<MissionTagDef>("MissionTypeAlienLairAssault_MissionTagDef");

                    if (__instance.MissionDef.Tags.Contains(lairTag) || __instance.MissionDef.Tags.Contains(citadelTag))
                    {
                        int siteId = __instance.Site.SiteId;
                        TFTVLogger.Always($"AddEquipmentCrates running on Lair or Citadel Map.");

                        if (AttackedLairSites == null)
                        {
                            AttackedLairSites = new Dictionary<int, int>
                            {
                                { siteId, 1 }
                            };

                        }
                        else
                        {

                            if (AttackedLairSites.ContainsKey(siteId) && AttackedLairSites[siteId] > 0)
                            {
                                MethodInfo addEnvironmentParticipantdMethod = AccessTools.Method(typeof(GeoMission), "AddEnvironmentParticipant");
                                GeoLevelController geoLevel = __instance.Site.GeoLevel;
                                GeoPhoenixFaction phoenixFaction = geoLevel.PhoenixFaction;
                                PPFactionDef environmentFactionDef = __instance.GameController.GetComponent<SharedData>().EnvironmentFactionDef;
                                TacMissionFactionData tacMissionFactionData = (TacMissionFactionData)addEnvironmentParticipantdMethod.Invoke(__instance, new object[] { missionData, environmentFactionDef });
                                if (missionData.MissionType.MissionSpecificCrates != null)
                                {
                                    tacMissionFactionData.InitialDeploymentPoints = Math.Max(__instance.MissionDef.CratesDeploymentPointsRange.RandomValue() - AttackedLairSites[siteId] * 50, 0);
                                    ActorDeployData actorDeployData = missionData.MissionType.MissionSpecificCrates.EquipmentCratesDeployData.Clone();
                                    TacEquipmentCrateDef tacEquipmentCrateDef = actorDeployData.InstanceDef as TacEquipmentCrateDef;
                                    TacEquipmentCrateData tacEquipmentCrateData = new TacEquipmentCrateData
                                    {
                                        ComponentSetTemplate = actorDeployData.InstanceDef.InstanceData.ComponentSetTemplate,
                                        Quantity = tacEquipmentCrateDef.Data.Quantity,
                                        Items = tacEquipmentCrateDef.Data.Items
                                    };
                                    if (missionData.MissionType.FactionItemsRange.Max > 0)
                                    {
                                        List<TacticalItemDef> list = null;
                                        list = ((__instance.Site.Owner.Manufacture == null) ? geoLevel.GetAvailableFactionEquipment(onlyDiscoveredFactions: true) : (from t in __instance.Site.Owner.Manufacture.GetEquipment()
                                                                                                                                                                     select (TacticalItemDef)t.RelatedItemDef).ToList());
                                        if (list.Count != 0)
                                        {
                                            for (int i = 0; i < list.Count(); i++)
                                            {
                                                ItemDef itemDef = list[i];
                                                tacEquipmentCrateData.AdditionalItems.Add(new InventorySupplementComponentDef.ItemChancePair
                                                {
                                                    ChanceToPresent = itemDef.CrateSpawnWeight,
                                                    ItemDef = itemDef
                                                });
                                            }

                                            tacEquipmentCrateData.AdditionalQuantity = missionData.MissionType.FactionItemsRange;
                                        }
                                    }

                                    actorDeployData.InstanceDef = null;
                                    actorDeployData.ActorInstance = tacEquipmentCrateData;
                                    tacMissionFactionData.ActorDeployData.Add(actorDeployData);
                                }

                                AttackedLairSites[siteId] += 1;



                                return false;

                            }
                            else
                            {

                                AttackedLairSites.Add(siteId, 1);
                            }
                        }


                    }
                    return true;

                }
                catch (Exception e)
                {
                    TFTVLogger.Error(e);
                    throw;
                }
            }
        }
    }
}
